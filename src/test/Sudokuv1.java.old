import java.util.Random;

public class Sudoku
{
	private static final int SIZE = 9;
	private static final int EMPTY = 0;

	private int[][] grid;

	public static void main( String[] agrs )
	{
		Random random = new Random();

		Sudoku s = new Sudoku();
		s.fillRandomSudoku();
		System.out.println( s.toString() );

		s.removeNumbers( random.nextInt(30) + 15 ); // Supprimer certains chiffres aléatoirement
		System.out.println( s.toString() );

		s.solveSudoku();
		System.out.println( s.toString() );
	}

	public Sudoku()
	{
		this.grid = new int[SIZE][SIZE];
	}

	public final int getSize()
	{
	    return Sudoku.SIZE;
	}

	public int getNumber( int row, int col )
	{
		return this.grid[row][col];
	}

	public void setNumber( int row, int col, int value )
	{
		this.grid[row][col] = value;
	}

	public void fillRandomSudoku()
	{
		this.fillDiagonalRegions();
		this.solveSudoku(); // Remplir complètement la grille
	}

	// Remplit les régions diagonales de la grille (3x3)
	public void fillDiagonalRegions()
	{
		Random random = new Random();
		int[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9};
		Sudoku.shuffleArray(values, random);

		for (int i = 0; i < SIZE; i += 3)
		{
			this.fillRegion(i, i, values);
		}
	}

	// Remplit une région 3x3 de la grille de manière aléatoire
	public void fillRegion( int startRow, int startCol, int[] values )
	{
		Random random = new Random();
		Sudoku.shuffleArray(values, random);
		int index = 0;
		for (int i = startRow; i < startRow + 3; i++)
		{
			for (int j = startCol; j < startCol + 3; j++)
			{
				this.grid[i][j] = values[index++];
			}
		}
	}

	// Résout la grille de Sudoku complètement
	public boolean solveSudoku()
	{
		for( int row = 0; row < SIZE; row++ )
		{
			for( int col = 0; col < SIZE; col++ )
			{
				if( this.grid[row][col] == EMPTY )
				{
					for( int num = 1; num <= SIZE; num++ )
					{
						if( Sudoku.isValidMove( this.grid, row, col, num ) )
						{
							this.grid[row][col] = num;
							if( this.solveSudoku() )
							{
								return true;
							}
							this.grid[row][col] = EMPTY;
						}
					}
					return false;
				}
			}
		}
		return true;
	}

	// Vérifie si un chiffre peut être placé dans une case donnée
	public static boolean isValidMove( int[][] grid, int row, int col, int num )
	{
		return !Sudoku.usedInRow(grid, row, num) && !Sudoku.usedInCol(grid, col, num) && !Sudoku.usedInRegion(grid, row - row % 3, col - col % 3, num);
	}

	// Vérifie si un chiffre est déjà utilisé dans une ligne donnée
	public static boolean usedInRow( int[][] grid, int row, int num )
	{
		for( int col = 0; col < SIZE; col++ )
		{
			if( grid[row][col] == num )
			{
				return true;
			}
		}
		return false;
	}

	// Vérifie si un chiffre est déjà utilisé dans une colonne donnée
	public static boolean usedInCol( int[][] grid, int col, int num )
	{
		for( int row = 0; row < SIZE; row++ )
		{
			if( grid[row][col] == num )
			{
				return true;
			}
		}
		return false;
	}

	// Vérifie si un chiffre est déjà utilisé dans une région 3x3 donnée
	public static boolean usedInRegion( int[][] grid, int startRow, int startCol, int num )
	{
		for( int row = 0; row < 3; row++ )
		{
			for( int col = 0; col < 3; col++ )
			{
				if( grid[row + startRow][col + startCol] == num )
				{
					return true;
				}
			}
		}
		return false;
	}

	// Supprime un nombre donné de chiffres de la grille
	public void removeNumbers( int count )
	{
		Random random = new Random();
		while( count > 0 )
		{
			int row = random.nextInt(SIZE);
			int col = random.nextInt(SIZE);
			if( this.grid[row][col] != EMPTY )
			{
				this.grid[row][col] = EMPTY;
				count--;
			}
		}
	}

	// Mélange un tableau d'entiers de manière aléatoire
	public static void shuffleArray(int[] arr, Random random)
	{
		for (int i = arr.length - 1; i > 0; i--)
		{
			int index = random.nextInt(i + 1);
			int temp = arr[index];
			arr[index] = arr[i];
			arr[i] = temp;
		}
	}

	// Affiche la grille de Sudoku
	public String toString()
	{
		String s="";

		for( int row = 0; row < SIZE; row++ )
		{
			for( int col = 0; col < SIZE; col++ )
			{
				s += this.grid[row][col] + " ";
			}
			s+="\n";
		}
		return s;
	}
}
